---
- name: Provision VPC 
  hosts: localhost
  become: true
  vars: 
    my_region: us-east-2
  tasks: 
    - name: Create VPC
      ec2_vpc_net: 
        name: "my-vpc-Analytics"
        state: present
        cidr_block: 10.0.0.0/16
        region: "{{ my_region }}"
      register: myvpc

    - name: Create subnet and associate 
      ec2_vpc_subnet: 
        state: present
        vpc_id: "{{ myvpc.vpc.id }}"
        cidr: 10.0.1.0/28
        resource_tags: 
          Name: privatesubnet
      register: sub
       

    - name: create IGW
      ec2_vpc_igw:
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ my_region }}"
        state: present
        tags: 
          Name: "Myigw"
      register: igw


    - name: Create Security Group
      ec2_group:
        name: my-sg
        description: DMZ Security Group
        vpc_id: "{{ myvpc.vpc.id }}"
        region: "{{ my_region }}"
        rules:
          - proto: tcp
            ports:
            - 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            ports:
            - 22
            cidr_ip: 0.0.0.0/0
      register: security_group
     
   # - name: SG OUT 
  #    debug: 
 #       msg: "{{ security_group.group_id | regex_replace('"', '\"') }"
#      register: sgs

    - local_action: copy content={{ security_group.group_id }} dest=/tmp/grp_id.txt
      register: sgs
 
    - name: Print the file
      command:  sed -i 's/\"//g' /tmp/grp_id.txt
      register: sgfile
  #  - name: Capture SG ID
 #     command: echo '{{ security_group.group_id }}'| sed 's/\"//g'
     # command: echo '{{ security_group.group_id }}'
#      register: sgs

    - name: SG OUT
      debug:
        msg: "{{ sgfile.stdout }}"
  
    
    - name: Launch the new ec2 instance
      ec2: 
        instance_type: t2.micro
        key_name: aws_final
        image: ami-0f2b4fc905b0bd1f1
        user_data: "{{ lookup('file', '/home/ansible/ansible/playbooks/ans_env.sh')}}"
        region: "{{ my_region }}"
        #group: "{{ security_group.group_id }}"
        group: "{{ sgfile.stdout }}"
        vpc_subnet_id: "{{ sub.subnet.id }}"
        count_tag: 
          application: ElastickSearch-cluster-{{ item }}
        exact_count: 3
      register: ec2
      with_items: 
        - master
        - client
        - data


    - name: Add the newly created EC2 instance(s) to the local host group (located inside the directory)
      local_action: lineinfile
                    dest="./hosts"
                    regexp={{ item.public_ip }}
                    insertafter="[doc]" line={{ item.public_ip }}
      with_items: "{{ ec2.instances }}"


    - name: Wait for SSH to come up
      local_action: wait_for
                    host={{ item.public_ip }}
                    port=22
                    state=started
      with_items: "{{ ec2.instances }}"

    - name: Add tag to Instance(s)
      local_action: ec2_tag resource={{ item.id }} region=us-east-2 state=present
      with_items: "{{ ec2.instances }}"
      args:
        tags:
          Name:  ElastickSearch-cluster{{ item }}
      with_items: 
        - master
        - client
        - data
    - name: make known host entry
      shell: ssh-keyscan {{ item.public_ip }} >> /home/ansible/.ssh/known_hosts
      with_items: "{{ ec2.instances }}"
